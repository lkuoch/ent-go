// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	errors "errors"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	ent "lkuoch/ent-todo/ent"
	remote "lkuoch/ent-todo/ent/remote"
	types "lkuoch/ent-todo/ent/schema/types"
)

// RemoteService implements RemoteServiceServer
type RemoteService struct {
	client *ent.Client
	UnimplementedRemoteServiceServer
}

// NewRemoteService returns a new RemoteService
func NewRemoteService(client *ent.Client) *RemoteService {
	return &RemoteService{
		client: client,
	}
}

// toProtoRemote transforms the ent type to the pb type
func toProtoRemote(e *ent.Remote) (*Remote, error) {
	v := &Remote{}
	data := e.Data
	v.Data = data
	idValue, err := e.ID.Value()
	if err != nil {
		return nil, err
	}
	id, ok := idValue.(string)
	if !ok {
		return nil, errors.New("casting value to string")
	}
	v.Id = id
	return v, nil
}

// toProtoRemoteList transforms a list of ent type to a list of pb type
func toProtoRemoteList(e []*ent.Remote) ([]*Remote, error) {
	var pbList []*Remote
	for _, entEntity := range e {
		pbEntity, err := toProtoRemote(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements RemoteServiceServer.Create
func (svc *RemoteService) Create(ctx context.Context, req *CreateRemoteRequest) (*Remote, error) {
	remote := req.GetRemote()
	m, err := svc.createBuilder(remote)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoRemote(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements RemoteServiceServer.Get
func (svc *RemoteService) Get(ctx context.Context, req *GetRemoteRequest) (*Remote, error) {
	var (
		err error
		get *ent.Remote
	)
	id := types.ID{}
	if err := (&id).Scan(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetRemoteRequest_VIEW_UNSPECIFIED, GetRemoteRequest_BASIC:
		get, err = svc.client.Remote.Get(ctx, id)
	case GetRemoteRequest_WITH_EDGE_IDS:
		get, err = svc.client.Remote.Query().
			Where(remote.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoRemote(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements RemoteServiceServer.Update
func (svc *RemoteService) Update(ctx context.Context, req *UpdateRemoteRequest) (*Remote, error) {
	remote := req.GetRemote()
	remoteID := types.ID{}
	if err := (&remoteID).Scan(remote.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Remote.UpdateOneID(remoteID)
	remoteData := remote.GetData()
	m.SetData(remoteData)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoRemote(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements RemoteServiceServer.Delete
func (svc *RemoteService) Delete(ctx context.Context, req *DeleteRemoteRequest) (*emptypb.Empty, error) {
	var err error
	id := types.ID{}
	if err := (&id).Scan(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Remote.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements RemoteServiceServer.List
func (svc *RemoteService) List(ctx context.Context, req *ListRemoteRequest) (*ListRemoteResponse, error) {
	var (
		err      error
		entList  []*ent.Remote
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Remote.Query().
		Order(ent.Desc(remote.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(remote.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListRemoteRequest_VIEW_UNSPECIFIED, ListRemoteRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListRemoteRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoRemoteList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListRemoteResponse{
			RemoteList:    protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements RemoteServiceServer.BatchCreate
func (svc *RemoteService) BatchCreate(ctx context.Context, req *BatchCreateRemotesRequest) (*BatchCreateRemotesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.RemoteCreate, len(requests))
	for i, req := range requests {
		remote := req.GetRemote()
		var err error
		bulk[i], err = svc.createBuilder(remote)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Remote.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoRemoteList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateRemotesResponse{
			Remotes: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *RemoteService) createBuilder(remote *Remote) (*ent.RemoteCreate, error) {
	m := svc.client.Remote.Create()
	remoteData := remote.GetData()
	m.SetData(remoteData)
	return m, nil
}
