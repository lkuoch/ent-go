// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph_model

import (
	"fmt"
	"io"
	"lkuoch/ent-todo/ent/generated/todo"
	"strconv"
	"time"
)

// CreateTodoInput is used for create Todo object.
// Input was generated by ent.
type CreateTodoInput struct {
	CreatedAt     *time.Time     `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time     `json:"updatedAt,omitempty"`
	Title         string         `json:"title"`
	Priority      *todo.Priority `json:"priority,omitempty"`
	Status        *todo.Status   `json:"status,omitempty"`
	TimeCompleted *time.Time     `json:"timeCompleted,omitempty"`
	ChildIDs      []string       `json:"childIDs,omitempty"`
	ParentID      *string        `json:"parentID,omitempty"`
	UserIDs       []string       `json:"userIDs,omitempty"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Todo struct {
	ID            string        `json:"id"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
	Title         string        `json:"title"`
	Priority      todo.Priority `json:"priority"`
	Status        todo.Status   `json:"status"`
	TimeCompleted *time.Time    `json:"timeCompleted,omitempty"`
	Children      []*Todo       `json:"children,omitempty"`
	Parent        *Todo         `json:"parent,omitempty"`
	User          []*User       `json:"user,omitempty"`
}

func (Todo) IsNode() {}

type User struct {
	ID          string    `json:"id"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Username    string    `json:"username"`
	DisplayName string    `json:"displayName"`
	Todos       []*Todo   `json:"todos,omitempty"`
}

func (User) IsNode() {}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
