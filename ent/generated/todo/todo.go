// Code generated by ent, DO NOT EDIT.

package todo

import (
	"fmt"
	"lkuoch/ent-todo/ent/schema/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
)

const (
	// Label holds the string label denoting the todo type in the database.
	Label = "todo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldItemPriority holds the string denoting the item_priority field in the database.
	FieldItemPriority = "item_priority"
	// FieldItemStatus holds the string denoting the item_status field in the database.
	FieldItemStatus = "item_status"
	// FieldTimeCompleted holds the string denoting the time_completed field in the database.
	FieldTimeCompleted = "time_completed"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the todo in the database.
	Table = "todo"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "todo"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_todos"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "task"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "task"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "todo_tasks"
)

// Columns holds all SQL columns for todo fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTitle,
	FieldBody,
	FieldItemPriority,
	FieldItemStatus,
	FieldTimeCompleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "todo"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_todos",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() types.ID
)

const DefaultItemPriority types.ItemPriority = "NONE"

// ItemPriorityValidator is a validator for the "item_priority" field enum values. It is called by the builders before save.
func ItemPriorityValidator(ip types.ItemPriority) error {
	switch ip {
	case "HIGH", "MEDIUM", "LOW", "NONE":
		return nil
	default:
		return fmt.Errorf("todo: invalid enum value for item_priority field: %q", ip)
	}
}

const DefaultItemStatus types.ItemStatus = "IN_PROGRESS"

// ItemStatusValidator is a validator for the "item_status" field enum values. It is called by the builders before save.
func ItemStatusValidator(is types.ItemStatus) error {
	switch is {
	case "IN_PROGRESS", "COMPLETED":
		return nil
	default:
		return fmt.Errorf("todo: invalid enum value for item_status field: %q", is)
	}
}

// OrderOption defines the ordering options for the Todo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByItemPriority orders the results by the item_priority field.
func ByItemPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemPriority, opts...).ToFunc()
}

// ByItemStatus orders the results by the item_status field.
func ByItemStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemStatus, opts...).ToFunc()
}

// ByTimeCompleted orders the results by the time_completed field.
func ByTimeCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeCompleted, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}

var (
	// types.ItemPriority must implement graphql.Marshaler.
	_ graphql.Marshaler = (*types.ItemPriority)(nil)
	// types.ItemPriority must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*types.ItemPriority)(nil)
)

var (
	// types.ItemStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*types.ItemStatus)(nil)
	// types.ItemStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*types.ItemStatus)(nil)
)
