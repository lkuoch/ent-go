// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"lkuoch/ent-todo/ent/generated/task"
	"lkuoch/ent-todo/ent/generated/todo"
	"lkuoch/ent-todo/ent/schema/types"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID types.ID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ItemStatus holds the value of the "item_status" field.
	ItemStatus types.ItemStatus `json:"item_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	todo_tasks   *types.ID
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Task belongs to single Todo
	Todo *Todo `json:"todo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// TodoOrErr returns the Todo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) TodoOrErr() (*Todo, error) {
	if e.loadedTypes[0] {
		if e.Todo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: todo.Label}
		}
		return e.Todo, nil
	}
	return nil, &NotLoadedError{edge: "todo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldTitle:
			values[i] = new(sql.NullString)
		case task.FieldID:
			values[i] = new(types.ID)
		case task.FieldItemStatus:
			values[i] = new(types.ItemStatus)
		case task.ForeignKeys[0]: // todo_tasks
			values[i] = &sql.NullScanner{S: new(types.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*types.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case task.FieldItemStatus:
			if value, ok := values[i].(*types.ItemStatus); !ok {
				return fmt.Errorf("unexpected type %T for field item_status", values[i])
			} else if value != nil {
				t.ItemStatus = *value
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field todo_tasks", values[i])
			} else if value.Valid {
				t.todo_tasks = new(types.ID)
				*t.todo_tasks = *value.S.(*types.ID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTodo queries the "todo" edge of the Task entity.
func (t *Task) QueryTodo() *TodoQuery {
	return NewTaskClient(t.config).QueryTodo(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("generated: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("item_status=")
	builder.WriteString(fmt.Sprintf("%v", t.ItemStatus))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
