// Code generated by ent, DO NOT EDIT.

package generated

import (
	"lkuoch/ent-todo/ent/schema/types"
	"time"
)

// CreateTaskInput represents a mutation input for creating tasks.
type CreateTaskInput struct {
	Title      string
	ItemStatus *types.ItemStatus
	TodoID     types.ID
}

// Mutate applies the CreateTaskInput on the TaskMutation builder.
func (i *CreateTaskInput) Mutate(m *TaskMutation) {
	m.SetTitle(i.Title)
	if v := i.ItemStatus; v != nil {
		m.SetItemStatus(*v)
	}
	m.SetTodoID(i.TodoID)
}

// SetInput applies the change-set in the CreateTaskInput on the TaskCreate builder.
func (c *TaskCreate) SetInput(i CreateTaskInput) *TaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTaskInput represents a mutation input for updating tasks.
type UpdateTaskInput struct {
	Title      *string
	ItemStatus *types.ItemStatus
	TodoID     *types.ID
}

// Mutate applies the UpdateTaskInput on the TaskMutation builder.
func (i *UpdateTaskInput) Mutate(m *TaskMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.ItemStatus; v != nil {
		m.SetItemStatus(*v)
	}
	if v := i.TodoID; v != nil {
		m.SetTodoID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdate builder.
func (c *TaskUpdate) SetInput(i UpdateTaskInput) *TaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdateOne builder.
func (c *TaskUpdateOne) SetInput(i UpdateTaskInput) *TaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Title         string
	Body          string
	ItemPriority  *types.ItemPriority
	ItemStatus    *types.ItemStatus
	TimeCompleted *time.Time
	UserID        types.ID
	TaskIDs       []types.ID
}

// Mutate applies the CreateTodoInput on the TodoMutation builder.
func (i *CreateTodoInput) Mutate(m *TodoMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTitle(i.Title)
	m.SetBody(i.Body)
	if v := i.ItemPriority; v != nil {
		m.SetItemPriority(*v)
	}
	if v := i.ItemStatus; v != nil {
		m.SetItemStatus(*v)
	}
	if v := i.TimeCompleted; v != nil {
		m.SetTimeCompleted(*v)
	}
	m.SetUserID(i.UserID)
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the TodoCreate builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	UpdatedAt          *time.Time
	Title              *string
	Body               *string
	ItemPriority       *types.ItemPriority
	ItemStatus         *types.ItemStatus
	ClearTimeCompleted bool
	TimeCompleted      *time.Time
	UserID             *types.ID
	ClearTasks         bool
	AddTaskIDs         []types.ID
	RemoveTaskIDs      []types.ID
}

// Mutate applies the UpdateTodoInput on the TodoMutation builder.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Body; v != nil {
		m.SetBody(*v)
	}
	if v := i.ItemPriority; v != nil {
		m.SetItemPriority(*v)
	}
	if v := i.ItemStatus; v != nil {
		m.SetItemStatus(*v)
	}
	if i.ClearTimeCompleted {
		m.ClearTimeCompleted()
	}
	if v := i.TimeCompleted; v != nil {
		m.SetTimeCompleted(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdate builder.
func (c *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdateOne builder.
func (c *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Username    string
	DisplayName string
	TodoIDs     []types.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUsername(i.Username)
	m.SetDisplayName(i.DisplayName)
	if v := i.TodoIDs; len(v) > 0 {
		m.AddTodoIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt     *time.Time
	Username      *string
	DisplayName   *string
	ClearTodos    bool
	AddTodoIDs    []types.ID
	RemoveTodoIDs []types.ID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearTodos {
		m.ClearTodos()
	}
	if v := i.AddTodoIDs; len(v) > 0 {
		m.AddTodoIDs(v...)
	}
	if v := i.RemoveTodoIDs; len(v) > 0 {
		m.RemoveTodoIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
