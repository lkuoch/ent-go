// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"lkuoch/ent-todo/ent/generated/predicate"
	"lkuoch/ent-todo/ent/generated/task"
	"lkuoch/ent-todo/ent/generated/todo"
	"lkuoch/ent-todo/ent/generated/user"
	"lkuoch/ent-todo/ent/schema/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoUpdate is the builder for updating Todo entities.
type TodoUpdate struct {
	config
	hooks    []Hook
	mutation *TodoMutation
}

// Where appends a list predicates to the TodoUpdate builder.
func (tu *TodoUpdate) Where(ps ...predicate.Todo) *TodoUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TodoUpdate) SetUpdatedAt(t time.Time) *TodoUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TodoUpdate) SetTitle(s string) *TodoUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableTitle(s *string) *TodoUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetBody sets the "body" field.
func (tu *TodoUpdate) SetBody(s string) *TodoUpdate {
	tu.mutation.SetBody(s)
	return tu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableBody(s *string) *TodoUpdate {
	if s != nil {
		tu.SetBody(*s)
	}
	return tu
}

// SetItemPriority sets the "item_priority" field.
func (tu *TodoUpdate) SetItemPriority(tp types.ItemPriority) *TodoUpdate {
	tu.mutation.SetItemPriority(tp)
	return tu
}

// SetNillableItemPriority sets the "item_priority" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableItemPriority(tp *types.ItemPriority) *TodoUpdate {
	if tp != nil {
		tu.SetItemPriority(*tp)
	}
	return tu
}

// SetItemStatus sets the "item_status" field.
func (tu *TodoUpdate) SetItemStatus(ts types.ItemStatus) *TodoUpdate {
	tu.mutation.SetItemStatus(ts)
	return tu
}

// SetNillableItemStatus sets the "item_status" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableItemStatus(ts *types.ItemStatus) *TodoUpdate {
	if ts != nil {
		tu.SetItemStatus(*ts)
	}
	return tu
}

// SetTimeCompleted sets the "time_completed" field.
func (tu *TodoUpdate) SetTimeCompleted(t time.Time) *TodoUpdate {
	tu.mutation.SetTimeCompleted(t)
	return tu
}

// SetNillableTimeCompleted sets the "time_completed" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableTimeCompleted(t *time.Time) *TodoUpdate {
	if t != nil {
		tu.SetTimeCompleted(*t)
	}
	return tu
}

// ClearTimeCompleted clears the value of the "time_completed" field.
func (tu *TodoUpdate) ClearTimeCompleted() *TodoUpdate {
	tu.mutation.ClearTimeCompleted()
	return tu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tu *TodoUpdate) SetUserID(id types.ID) *TodoUpdate {
	tu.mutation.SetUserID(id)
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TodoUpdate) SetUser(u *User) *TodoUpdate {
	return tu.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tu *TodoUpdate) AddTaskIDs(ids ...types.ID) *TodoUpdate {
	tu.mutation.AddTaskIDs(ids...)
	return tu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tu *TodoUpdate) AddTasks(t ...*Task) *TodoUpdate {
	ids := make([]types.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskIDs(ids...)
}

// Mutation returns the TodoMutation object of the builder.
func (tu *TodoUpdate) Mutation() *TodoMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TodoUpdate) ClearUser() *TodoUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tu *TodoUpdate) ClearTasks() *TodoUpdate {
	tu.mutation.ClearTasks()
	return tu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tu *TodoUpdate) RemoveTaskIDs(ids ...types.ID) *TodoUpdate {
	tu.mutation.RemoveTaskIDs(ids...)
	return tu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tu *TodoUpdate) RemoveTasks(t ...*Task) *TodoUpdate {
	ids := make([]types.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TodoUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TodoUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TodoUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TodoUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TodoUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := todo.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TodoUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := todo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Todo.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ItemPriority(); ok {
		if err := todo.ItemPriorityValidator(v); err != nil {
			return &ValidationError{Name: "item_priority", err: fmt.Errorf(`generated: validator failed for field "Todo.item_priority": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ItemStatus(); ok {
		if err := todo.ItemStatusValidator(v); err != nil {
			return &ValidationError{Name: "item_status", err: fmt.Errorf(`generated: validator failed for field "Todo.item_status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Todo.user"`)
	}
	return nil
}

func (tu *TodoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(todo.Table, todo.Columns, sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(todo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(todo.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Body(); ok {
		_spec.SetField(todo.FieldBody, field.TypeString, value)
	}
	if value, ok := tu.mutation.ItemPriority(); ok {
		_spec.SetField(todo.FieldItemPriority, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ItemStatus(); ok {
		_spec.SetField(todo.FieldItemStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TimeCompleted(); ok {
		_spec.SetField(todo.FieldTimeCompleted, field.TypeTime, value)
	}
	if tu.mutation.TimeCompletedCleared() {
		_spec.ClearField(todo.FieldTimeCompleted, field.TypeTime)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.UserTable,
			Columns: []string{todo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.UserTable,
			Columns: []string{todo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TodoUpdateOne is the builder for updating a single Todo entity.
type TodoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TodoUpdateOne) SetUpdatedAt(t time.Time) *TodoUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TodoUpdateOne) SetTitle(s string) *TodoUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableTitle(s *string) *TodoUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetBody sets the "body" field.
func (tuo *TodoUpdateOne) SetBody(s string) *TodoUpdateOne {
	tuo.mutation.SetBody(s)
	return tuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableBody(s *string) *TodoUpdateOne {
	if s != nil {
		tuo.SetBody(*s)
	}
	return tuo
}

// SetItemPriority sets the "item_priority" field.
func (tuo *TodoUpdateOne) SetItemPriority(tp types.ItemPriority) *TodoUpdateOne {
	tuo.mutation.SetItemPriority(tp)
	return tuo
}

// SetNillableItemPriority sets the "item_priority" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableItemPriority(tp *types.ItemPriority) *TodoUpdateOne {
	if tp != nil {
		tuo.SetItemPriority(*tp)
	}
	return tuo
}

// SetItemStatus sets the "item_status" field.
func (tuo *TodoUpdateOne) SetItemStatus(ts types.ItemStatus) *TodoUpdateOne {
	tuo.mutation.SetItemStatus(ts)
	return tuo
}

// SetNillableItemStatus sets the "item_status" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableItemStatus(ts *types.ItemStatus) *TodoUpdateOne {
	if ts != nil {
		tuo.SetItemStatus(*ts)
	}
	return tuo
}

// SetTimeCompleted sets the "time_completed" field.
func (tuo *TodoUpdateOne) SetTimeCompleted(t time.Time) *TodoUpdateOne {
	tuo.mutation.SetTimeCompleted(t)
	return tuo
}

// SetNillableTimeCompleted sets the "time_completed" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableTimeCompleted(t *time.Time) *TodoUpdateOne {
	if t != nil {
		tuo.SetTimeCompleted(*t)
	}
	return tuo
}

// ClearTimeCompleted clears the value of the "time_completed" field.
func (tuo *TodoUpdateOne) ClearTimeCompleted() *TodoUpdateOne {
	tuo.mutation.ClearTimeCompleted()
	return tuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tuo *TodoUpdateOne) SetUserID(id types.ID) *TodoUpdateOne {
	tuo.mutation.SetUserID(id)
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TodoUpdateOne) SetUser(u *User) *TodoUpdateOne {
	return tuo.SetUserID(u.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (tuo *TodoUpdateOne) AddTaskIDs(ids ...types.ID) *TodoUpdateOne {
	tuo.mutation.AddTaskIDs(ids...)
	return tuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (tuo *TodoUpdateOne) AddTasks(t ...*Task) *TodoUpdateOne {
	ids := make([]types.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskIDs(ids...)
}

// Mutation returns the TodoMutation object of the builder.
func (tuo *TodoUpdateOne) Mutation() *TodoMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TodoUpdateOne) ClearUser() *TodoUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (tuo *TodoUpdateOne) ClearTasks() *TodoUpdateOne {
	tuo.mutation.ClearTasks()
	return tuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (tuo *TodoUpdateOne) RemoveTaskIDs(ids ...types.ID) *TodoUpdateOne {
	tuo.mutation.RemoveTaskIDs(ids...)
	return tuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (tuo *TodoUpdateOne) RemoveTasks(t ...*Task) *TodoUpdateOne {
	ids := make([]types.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the TodoUpdate builder.
func (tuo *TodoUpdateOne) Where(ps ...predicate.Todo) *TodoUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TodoUpdateOne) Select(field string, fields ...string) *TodoUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Todo entity.
func (tuo *TodoUpdateOne) Save(ctx context.Context) (*Todo, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TodoUpdateOne) SaveX(ctx context.Context) *Todo {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TodoUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TodoUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TodoUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := todo.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TodoUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := todo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "Todo.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ItemPriority(); ok {
		if err := todo.ItemPriorityValidator(v); err != nil {
			return &ValidationError{Name: "item_priority", err: fmt.Errorf(`generated: validator failed for field "Todo.item_priority": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ItemStatus(); ok {
		if err := todo.ItemStatusValidator(v); err != nil {
			return &ValidationError{Name: "item_status", err: fmt.Errorf(`generated: validator failed for field "Todo.item_status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Todo.user"`)
	}
	return nil
}

func (tuo *TodoUpdateOne) sqlSave(ctx context.Context) (_node *Todo, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todo.Table, todo.Columns, sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Todo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todo.FieldID)
		for _, f := range fields {
			if !todo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != todo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(todo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(todo.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Body(); ok {
		_spec.SetField(todo.FieldBody, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ItemPriority(); ok {
		_spec.SetField(todo.FieldItemPriority, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ItemStatus(); ok {
		_spec.SetField(todo.FieldItemStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TimeCompleted(); ok {
		_spec.SetField(todo.FieldTimeCompleted, field.TypeTime, value)
	}
	if tuo.mutation.TimeCompletedCleared() {
		_spec.ClearField(todo.FieldTimeCompleted, field.TypeTime)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.UserTable,
			Columns: []string{todo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.UserTable,
			Columns: []string{todo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !tuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.TasksTable,
			Columns: []string{todo.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Todo{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
