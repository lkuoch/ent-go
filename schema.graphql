directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  createdAt: Time
  updatedAt: Time
  title: String!
  priority: TodoPriority
  status: TodoStatus
  timeCompleted: Time
  childIDs: [ID!]
  parentID: ID
  userIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "lkuoch/ent-todo/ent/generated.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  todos: [Todo!]!
}
"""The builtin Time type"""
scalar Time
type Todo implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  priority: TodoPriority!
  status: TodoStatus!
  timeCompleted: Time
  children: [Todo!]
  parent: Todo
  user: [User!]
}
"""TodoPriority is enum for the field priority"""
enum TodoPriority @goModel(model: "lkuoch/ent-todo/ent/generated/todo.Priority") {
  HIGH
  MEDIUM
  LOW
  NONE
}
"""TodoStatus is enum for the field status"""
enum TodoStatus @goModel(model: "lkuoch/ent-todo/ent/generated/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  username: String!
  displayName: String!
  todos: [Todo!]
}
